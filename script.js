// Clock functionality
function updateClock() {
  const now = new Date();
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  document.getElementById('clock').textContent = `${hours}:${minutes}:${seconds}`;
}

// Enhanced weather data with more realistic patterns
const weatherData = {
  temperature: [26, 28, 31, 33, 30, 27, 25],
  humidity: [75, 70, 65, 60, 80, 85, 78],
  rainfall: [2, 0, 0, 5, 25, 15, 8],
  windSpeed: [12, 15, 18, 20, 25, 22, 16],
  uvIndex: [6, 8, 9, 10, 7, 5, 6],
  pressure: [1012, 1015, 1018, 1020, 1008, 1005, 1010],
  days: ["T2", "T3", "T4", "T5", "T6", "T7", "CN"]
};

// Enhanced feature messages with more detailed information
const featureMessages = {
  weather: `üå§Ô∏è TH√îNG TIN TH·ªúI TI·∫æT CHI TI·∫æT\n\nüìç V·ªã tr√≠: ƒê√† N·∫µng, Vi·ªát Nam\nüå°Ô∏è Nhi·ªát ƒë·ªô: 28¬∞C (C·∫£m gi√°c nh∆∞ 31¬∞C)\nüíß ƒê·ªô ·∫©m: 75%\nüí® Gi√≥: 15 km/h, h∆∞·ªõng ƒê√¥ng Nam\n‚òÄÔ∏è Ch·ªâ s·ªë UV: 8 (Cao)\nüåä √Åp su·∫•t: 1015 hPa\nüëÅÔ∏è T·∫ßm nh√¨n: 10 km\n\nüìä D·ª± b√°o:\n‚Ä¢ S√°ng: N·∫Øng √≠t m√¢y\n‚Ä¢ Chi·ªÅu: C√≥ th·ªÉ c√≥ m∆∞a r√†o\n‚Ä¢ T·ªëi: Tr·ªùi quang, m√°t m·∫ª`,
  
  plants: `üå± T∆Ø V·∫§N N√îNG NGHI·ªÜP TH√îNG MINH\n\nüå§Ô∏è ƒêi·ªÅu ki·ªán hi·ªán t·∫°i (28¬∞C, 75% ƒë·ªô ·∫©m):\n\n‚úÖ C√ÇY TR·ªíNG PH√ô H·ª¢P:\n‚Ä¢ C√† chua üçÖ - Th·ªùi v·ª• t·ªët\n‚Ä¢ D∆∞a chu·ªôt ü•í - Ph√°t tri·ªÉn m·∫°nh\n‚Ä¢ Rau mu·ªëng ü•¨ - L√Ω t∆∞·ªüng\n‚Ä¢ ·ªöt üå∂Ô∏è - ƒêi·ªÅu ki·ªán t·ªët\n‚Ä¢ Hoa h∆∞·ªõng d∆∞∆°ng üåª - N·ªü ƒë·∫πp\n\nüí° KHUY·∫æN NGH·ªä:\n‚Ä¢ T∆∞·ªõi n∆∞·ªõc: 6-7h s√°ng v√† 17-18h chi·ªÅu\n‚Ä¢ B√≥n ph√¢n: NPK 16-16-8 m·ªói 2 tu·∫ßn\n‚Ä¢ Phun thu·ªëc tr·ª´ s√¢u: Tr√°nh gi·ªù n·∫Øng g·∫Øt\n‚Ä¢ Che ch·∫Øn: D√πng l∆∞·ªõi 30% trong gi·ªù cao ƒëi·ªÉm`,
  
  alerts: `‚ö†Ô∏è C·∫¢NH B√ÅO TH·ªúI TI·∫æT V√Ä THI√äN TAI\n\nüåßÔ∏è D·ª∞ B√ÅO 48H T·ªöI:\n‚Ä¢ M∆∞a v·ª´a ƒë·∫øn m∆∞a to: 50-100mm\n‚Ä¢ Gi√≥ m·∫°nh c·∫•p 6-7, gi·∫≠t c·∫•p 8\n‚Ä¢ Nguy c∆° ng·∫≠p √∫ng t·∫°i v√πng tr≈©ng\n‚Ä¢ S√≥ng bi·ªÉn cao 2-3m\n\nüö® C·∫¢NH B√ÅO ƒê·∫∂C BI·ªÜT:\n‚Ä¢ L≈© qu√©t c√≥ th·ªÉ x·∫£y ra t·∫°i v√πng n√∫i\n‚Ä¢ S·∫°t l·ªü ƒë·∫•t ·ªü c√°c s∆∞·ªùn d·ªëc\n‚Ä¢ ·∫¢nh h∆∞·ªüng giao th√¥ng ƒë∆∞·ªùng b·ªô\n\nüìã KHUY·∫æN NGH·ªä AN TO√ÄN:\n‚Ä¢ H·∫°n ch·∫ø ra ngo√†i khi kh√¥ng c·∫ßn thi·∫øt\n‚Ä¢ Chu·∫©n b·ªã ƒë·ªì d√πng kh·∫©n c·∫•p\n‚Ä¢ Theo d√µi tin t·ª©c c·∫≠p nh·∫≠t\n‚Ä¢ G·ªçi 113 khi c·∫ßn h·ªó tr·ª£`
};

// Enhanced SOS Emergency System with more contacts and features
const sosEmergencySystem = {
  emergencyContacts: [
    { name: 'C·∫£nh s√°t 113', number: '113', type: 'police', icon: 'ri-police-car-line', description: 'C·∫£nh s√°t - An ninh tr·∫≠t t·ª±', priority: 1 },
    { name: 'C·ª©u h·ªèa 114', number: '114', type: 'fire', icon: 'ri-fire-line', description: 'Ph√≤ng ch√°y ch·ªØa ch√°y', priority: 1 },
    { name: 'C·∫•p c·ª©u 115', number: '115', type: 'medical', icon: 'ri-heart-pulse-line', description: 'C·∫•p c·ª©u y t·∫ø', priority: 1 },
    { name: 'C·ª©u h·ªô 116', number: '116', type: 'rescue', icon: 'ri-lifebuoy-line', description: 'C·ª©u h·ªô c·ª©u n·∫°n', priority: 1 },
    { name: 'Trung t√¢m c·ª©u h·ªô', number: '1900-1234', type: 'rescue', icon: 'ri-shield-cross-line', description: 'Trung t√¢m c·ª©u h·ªô 24/7', priority: 2 },
    { name: 'C·ª©u h·ªô giao th√¥ng', number: '1900-5678', type: 'traffic', icon: 'ri-roadster-line', description: 'C·ª©u h·ªô tai n·∫°n giao th√¥ng', priority: 2 },
    { name: 'B·ªánh vi·ªán Ch·ª£ R·∫´y', number: '028-3855-4269', type: 'hospital', icon: 'ri-hospital-line', description: 'B·ªánh vi·ªán Ch·ª£ R·∫´y - TP.HCM', priority: 3 },
    { name: 'B·ªánh vi·ªán B·∫°ch Mai', number: '024-3869-3731', type: 'hospital', icon: 'ri-hospital-line', description: 'B·ªánh vi·ªán B·∫°ch Mai - H√† N·ªôi', priority: 3 },
    { name: 'B·ªánh vi·ªán ƒê√† N·∫µng', number: '0236-3822-480', type: 'hospital', icon: 'ri-hospital-line', description: 'B·ªánh vi·ªán ƒê√† N·∫µng', priority: 3 },
    { name: 'Nguy·ªÖn VƒÉn A', number: '+84 981 234 567', type: 'family', icon: 'ri-user-heart-line', description: 'Li√™n h·ªá gia ƒë√¨nh', priority: 4 },
    { name: 'Tr·∫ßn Th·ªã B', number: '+84 987 654 321', type: 'family', icon: 'ri-user-heart-line', description: 'Li√™n h·ªá kh·∫©n c·∫•p', priority: 4 },
    { name: 'C√¥ng ty b·∫£o hi·ªÉm', number: '1900-9999', type: 'insurance', icon: 'ri-shield-check-line', description: 'B·∫£o hi·ªÉm tai n·∫°n', priority: 5 }
  ],
  currentLocation: null,
  isEmergencyActive: false,
  emergencyHistory: [],
  lastLocationUpdate: null
};

// Enhanced Disaster Warning System with real-time data simulation
const disasterWarningSystem = {
  currentAlerts: [
    // Uncomment to test with active alerts
    // {
    //   id: 1,
    //   title: 'C·∫£nh b√°o m∆∞a l·ªõn',
    //   description: 'M∆∞a to ƒë·∫øn r·∫•t to trong 6-12 gi·ªù t·ªõi, l∆∞·ª£ng m∆∞a 100-200mm',
    //   level: 'high',
    //   time: new Date().toLocaleString('vi-VN'),
    //   area: 'Mi·ªÅn Trung',
    //   type: 'rain'
    // }
  ],
  riskAssessment: {
    overall: 42,
    lastUpdate: new Date(),
    risks: [
      { name: 'Ng·∫≠p l·ª•t', level: 60, color: 'orange', trend: 'stable', description: 'Nguy c∆° ng·∫≠p √∫ng t·∫°i v√πng tr≈©ng' },
      { name: 'B√£o', level: 40, color: 'yellow', trend: 'decreasing', description: 'Kh·∫£ nƒÉng h√¨nh th√†nh b√£o th·∫•p' },
      { name: 'D√¥ng s√©t', level: 75, color: 'red', trend: 'increasing', description: 'D√¥ng s√©t m·∫°nh c√≥ th·ªÉ x·∫£y ra' },
      { name: 'M∆∞a l·ªõn', level: 80, color: 'red', trend: 'stable', description: 'M∆∞a to ƒë·∫øn r·∫•t to' },
      { name: 'S·∫°t l·ªü', level: 35, color: 'yellow', trend: 'stable', description: 'Nguy c∆° s·∫°t l·ªü ·ªü v√πng n√∫i' },
      { name: 'N·∫Øng n√≥ng', level: 20, color: 'green', trend: 'decreasing', description: 'Nhi·ªát ƒë·ªô trong ng∆∞·ª°ng b√¨nh th∆∞·ªùng' },
      { name: 'H·∫°n h√°n', level: 15, color: 'blue', trend: 'stable', description: 'Kh√¥ng c√≥ nguy c∆° h·∫°n h√°n' }
    ]
  },
  disasterHistory: [
    {
      date: '2024-12-15',
      type: 'M∆∞a l·ªõn',
      severity: 'Trung b√¨nh',
      affected: 'Qu·∫£ng Nam, ƒê√† N·∫µng',
      damage: 'Ng·∫≠p √∫ng c·ª•c b·ªô'
    },
    {
      date: '2024-11-28',
      type: 'B√£o s·ªë 9',
      severity: 'M·∫°nh',
      affected: 'Mi·ªÅn Trung',
      damage: 'Thi·ªát h·∫°i v·ªÅ nh√† c·ª≠a v√† c√¢y tr·ªìng'
    }
  ],
  
  emergencyGuides: {
    flood: [
      'Di chuy·ªÉn ƒë·∫øn n∆°i cao h∆°n ngay l·∫≠p t·ª©c',
      'Tr√°nh xa d√≤ng n∆∞·ªõc ch·∫£y xi·∫øt',
      'Chu·∫©n b·ªã t√∫i kh·∫©n c·∫•p v·ªõi ƒë·ªì d√πng thi·∫øt y·∫øu',
      'Theo d√µi th√¥ng tin c·∫£nh b√°o li√™n t·ª•c',
      'Kh√¥ng l√°i xe qua v√πng ng·∫≠p s√¢u',
      'C·∫Øt ƒëi·ªán tr∆∞·ªõc khi r·ªùi kh·ªèi nh√†'
    ],
    storm: [
      'Gia c·ªë c·ª≠a s·ªï, c·ª≠a ra v√†o v√† m√°i nh√†',
      'D·ª± tr·ªØ th·ª±c ph·∫©m v√† n∆∞·ªõc u·ªëng cho 3-5 ng√†y',
      'Tr√°nh ra ngo√†i khi b√£o ƒë·ªï b·ªô',
      'Chu·∫©n b·ªã ƒë√®n pin, pin d·ª± ph√≤ng v√† radio',
      'Tr√°nh xa c·ª≠a s·ªï v√† v·∫≠t d·ª•ng c√≥ th·ªÉ ƒë·ªï',
      'C√≥ k·∫ø ho·∫°ch s∆° t√°n n·∫øu c·∫ßn thi·∫øt'
    ],
    landslide: [
      'Tr√°nh xa khu v·ª±c d·ªëc v√† s∆∞·ªùn n√∫i',
      'Quan s√°t c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng c·ªßa ƒë·∫•t ƒë√°',
      'Di t·∫£n ngay khi c√≥ c·∫£nh b√°o',
      'Kh√¥ng x√¢y d·ª±ng nh√† ·ªü g·∫ßn s∆∞·ªùn n√∫i',
      'Theo d√µi th√¥ng tin t·ª´ ch√≠nh quy·ªÅn ƒë·ªãa ph∆∞∆°ng',
      'Chu·∫©n b·ªã ph∆∞∆°ng ti·ªán di chuy·ªÉn kh·∫©n c·∫•p'
    ]
  }
};

// Enhanced chart initialization with more data
function initializeCharts() {
  // Temperature Chart with enhanced styling
  const temperatureChart = echarts.init(document.getElementById("temperatureChart"));
  temperatureChart.setOption({
    tooltip: { 
      trigger: "axis",
      backgroundColor: 'rgba(255, 255, 255, 0.95)',
      borderColor: '#2563eb',
      borderWidth: 1,
      textStyle: { color: '#1e293b', fontSize: 12 },
      formatter: function(params) {
        return `${params[0].name}<br/>Nhi·ªát ƒë·ªô: ${params[0].value}¬∞C`;
      }
    },
    xAxis: { 
      type: "category", 
      data: weatherData.days,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b', fontSize: 11 }
    },
    yAxis: { 
      type: "value",
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b', fontSize: 11 },
      splitLine: { lineStyle: { color: '#f1f5f9' } }
    },
    series: [{
      name: "Nhi·ªát ƒë·ªô (¬∞C)",
      type: "line",
      data: weatherData.temperature,
      smooth: true,
      lineStyle: { color: "#FF6347", width: 3 },
      areaStyle: { 
        color: {
          type: 'linear',
          x: 0, y: 0, x2: 0, y2: 1,
          colorStops: [
            { offset: 0, color: 'rgba(255, 99, 71, 0.4)' },
            { offset: 1, color: 'rgba(255, 99, 71, 0.1)' }
          ]
        }
      },
      itemStyle: { color: '#FF6347', borderWidth: 2, borderColor: '#fff' },
      emphasis: { focus: 'series' },
      markPoint: {
        data: [
          { type: 'max', name: 'Cao nh·∫•t' },
          { type: 'min', name: 'Th·∫•p nh·∫•t' }
        ]
      }
    }]
  });

  // Humidity Chart with enhanced styling
  const humidityChart = echarts.init(document.getElementById("humidityChart"));
  humidityChart.setOption({
    tooltip: { 
      trigger: "axis",
      backgroundColor: 'rgba(255, 255, 255, 0.95)',
      borderColor: '#1E90FF',
      borderWidth: 1,
      textStyle: { color: '#1e293b', fontSize: 12 },
      formatter: function(params) {
        return `${params[0].name}<br/>ƒê·ªô ·∫©m: ${params[0].value}%`;
      }
    },
    xAxis: { 
      type: "category", 
      data: weatherData.days,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b', fontSize: 11 }
    },
    yAxis: { 
      type: "value",
      min: 0,
      max: 100,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b', fontSize: 11, formatter: '{value}%' },
      splitLine: { lineStyle: { color: '#f1f5f9' } }
    },
    series: [{
      name: "ƒê·ªô ·∫©m (%)",
      type: "bar",
      data: weatherData.humidity,
      itemStyle: { 
        color: {
          type: 'linear',
          x: 0, y: 0, x2: 0, y2: 1,
          colorStops: [
            { offset: 0, color: '#1E90FF' },
            { offset: 1, color: '#87CEEB' }
          ]
        },
        borderRadius: [4, 4, 0, 0]
      },
      emphasis: { focus: 'series' },
      markLine: {
        data: [
          { yAxis: 70, name: 'M·ª©c l√Ω t∆∞·ªüng', lineStyle: { color: '#22c55e', type: 'dashed' } }
        ]
      }
    }]
  });

  // Rainfall Chart with enhanced styling
  const rainfallChart = echarts.init(document.getElementById("rainfallChart"));
  rainfallChart.setOption({
    tooltip: { 
      trigger: "axis",
      backgroundColor: 'rgba(255, 255, 255, 0.95)',
      borderColor: '#32CD32',
      borderWidth: 1,
      textStyle: { color: '#1e293b', fontSize: 12 },
      formatter: function(params) {
        return `${params[0].name}<br/>L∆∞·ª£ng m∆∞a: ${params[0].value}mm`;
      }
    },
    xAxis: { 
      type: "category", 
      data: weatherData.days,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b', fontSize: 11 }
    },
    yAxis: { 
      type: "value",
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b', fontSize: 11, formatter: '{value}mm' },
      splitLine: { lineStyle: { color: '#f1f5f9' } }
    },
    series: [{
      name: "L∆∞·ª£ng m∆∞a (mm)",
      type: "bar",
      data: weatherData.rainfall,
      itemStyle: { 
        color: function(params) {
          const value = params.value;
          if (value > 20) return '#ef4444'; // M∆∞a to - ƒë·ªè
          if (value > 10) return '#f59e0b'; // M∆∞a v·ª´a - cam
          if (value > 0) return '#22c55e';  // M∆∞a nh·ªè - xanh l√°
          return '#94a3b8'; // Kh√¥ng m∆∞a - x√°m
        },
        borderRadius: [4, 4, 0, 0]
      },
      emphasis: { focus: 'series' }
    }]
  });

  // Make charts responsive
  window.addEventListener('resize', () => {
    temperatureChart.resize();
    humidityChart.resize();
    rainfallChart.resize();
  });
}

// Enhanced map initialization with more features
function initializeMap() {
  const map = L.map('map').setView([16.0471, 108.2062], 6);
  
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  // Enhanced weather markers with more detailed information
  const weatherMarkers = [
    { 
      lat: 21.0285, lng: 105.8542, 
      city: 'H√† N·ªôi', 
      temp: '26¬∞C', 
      weather: '‚òÅÔ∏è',
      humidity: '78%',
      wind: '12 km/h',
      condition: 'Nhi·ªÅu m√¢y'
    },
    { 
      lat: 10.8231, lng: 106.6297, 
      city: 'TP.HCM', 
      temp: '30¬∞C', 
      weather: '‚òÄÔ∏è',
      humidity: '65%',
      wind: '8 km/h',
      condition: 'N·∫Øng ƒë·∫πp'
    },
    { 
      lat: 16.0471, lng: 108.2062, 
      city: 'ƒê√† N·∫µng', 
      temp: '28¬∞C', 
      weather: 'üå§Ô∏è',
      humidity: '75%',
      wind: '15 km/h',
      condition: 'N·∫Øng √≠t m√¢y'
    },
    { 
      lat: 10.0452, lng: 105.7469, 
      city: 'C·∫ßn Th∆°', 
      temp: '29¬∞C', 
      weather: 'üåßÔ∏è',
      humidity: '85%',
      wind: '10 km/h',
      condition: 'M∆∞a nh·ªè'
    },
    {
      lat: 20.8449, lng: 106.6881,
      city: 'H·∫£i Ph√≤ng',
      temp: '25¬∞C',
      weather: 'üå´Ô∏è',
      humidity: '88%',
      wind: '18 km/h',
      condition: 'S∆∞∆°ng m√π'
    },
    {
      lat: 12.2388, lng: 109.1967,
      city: 'Nha Trang',
      temp: '27¬∞C',
      weather: 'üåä',
      humidity: '72%',
      wind: '22 km/h',
      condition: 'Gi√≥ bi·ªÉn'
    }
  ];

  // Variables for location tracking
  let currentLocationMarker = null;
  let currentPosition = null;
  let watchId = null;

  weatherMarkers.forEach(marker => {
    const customIcon = L.divIcon({
      className: 'custom-weather-marker',
      html: `
        <div class="bg-white rounded-lg shadow-lg p-2 border-2 border-blue-300 min-w-[80px]">
          <div class="text-center">
            <div class="text-2xl mb-1">${marker.weather}</div>
            <div class="text-sm font-bold text-gray-800">${marker.temp}</div>
            <div class="text-xs text-gray-600">${marker.city}</div>
          </div>
        </div>
      `,
      iconSize: [80, 60],
      iconAnchor: [40, 60]
    });

    L.marker([marker.lat, marker.lng], { icon: customIcon })
      .addTo(map)
      .bindPopup(`
        <div class="text-center p-3 min-w-[200px]">
          <h3 class="font-bold text-lg text-blue-600 mb-2">${marker.city}</h3>
          <div class="text-4xl mb-3">${marker.weather}</div>
          <div class="grid grid-cols-2 gap-2 text-sm">
            <div class="bg-red-50 p-2 rounded">
              <div class="text-red-600 font-semibold">Nhi·ªát ƒë·ªô</div>
              <div class="text-xl font-bold text-red-700">${marker.temp}</div>
            </div>
            <div class="bg-blue-50 p-2 rounded">
              <div class="text-blue-600 font-semibold">ƒê·ªô ·∫©m</div>
              <div class="text-xl font-bold text-blue-700">${marker.humidity}</div>
            </div>
          </div>
          <div class="mt-3 p-2 bg-gray-50 rounded">
            <div class="text-gray-600 text-sm">
              <div><strong>Gi√≥:</strong> ${marker.wind}</div>
              <div><strong>T√¨nh tr·∫°ng:</strong> ${marker.condition}</div>
            </div>
          </div>
          <div class="mt-2 text-xs text-gray-500">
            C·∫≠p nh·∫≠t: ${new Date().toLocaleTimeString('vi-VN')}
          </div>
        </div>
      `);
  });

  // Enhanced location control
  const locationControl = L.control({ position: 'topright' });
  locationControl.onAdd = function(map) {
    const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
    
    div.innerHTML = `
      <div class="location-controls bg-white rounded-lg shadow-lg p-2">
        <button id="locateBtn" class="location-btn bg-blue-500 text-white p-2 rounded mb-2 hover:bg-blue-600 transition-colors" title="T√¨m v·ªã tr√≠ c·ªßa t√¥i">
          <i class="ri-map-pin-line text-lg"></i>
        </button>
        <button id="returnBtn" class="location-btn bg-green-500 text-white p-2 rounded hover:bg-green-600 transition-colors" title="Quay v·ªÅ v·ªã tr√≠ c·ªßa t√¥i" style="display: none;">
          <i class="ri-navigation-line text-lg"></i>
        </button>
      </div>
    `;
    
    div.style.backgroundColor = 'transparent';
    div.style.border = 'none';
    
    return div;
  };
  locationControl.addTo(map);

  // Enhanced location functions (keeping existing functionality)
  document.addEventListener('click', function(e) {
    if (e.target.closest('#locateBtn')) {
      locateCurrentPosition();
    }
    if (e.target.closest('#returnBtn')) {
      returnToCurrentLocation();
    }
  });

  function locateCurrentPosition() {
    const locateBtn = document.getElementById('locateBtn');
    const returnBtn = document.getElementById('returnBtn');
    
    if (!navigator.geolocation) {
      showNotification('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS', 'error');
      return;
    }

    locateBtn.innerHTML = '<i class="ri-loader-4-line text-lg animate-spin"></i>';
    locateBtn.disabled = true;

    const options = {
      enableHighAccuracy: true,
      timeout: 15000,
      maximumAge: 0
    };

    navigator.geolocation.getCurrentPosition(
      function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        const accuracy = position.coords.accuracy;
        
        currentPosition = { lat, lng };
        
        if (currentLocationMarker) {
          map.removeLayer(currentLocationMarker);
        }
        
        const accuracyColor = accuracy <= 50 ? 'green' : accuracy <= 100 ? 'blue' : 'orange';
        
        currentLocationMarker = L.marker([lat, lng], {
          icon: L.divIcon({
            className: 'current-location-marker',
            html: `<div class="bg-${accuracyColor}-500 w-4 h-4 rounded-full border-2 border-white shadow-lg animate-pulse"></div>`,
            iconSize: [16, 16],
            iconAnchor: [8, 8]
          })
        }).addTo(map);
        
        getLocationInfo(lat, lng).then(locationInfo => {
          currentLocationMarker.bindPopup(`
            <div class="text-center p-3">
              <h3 class="font-bold text-lg text-blue-600 mb-2">üìç V·ªã tr√≠ c·ªßa b·∫°n</h3>
              <p class="text-sm text-gray-600 mb-3">${locationInfo}</p>
              <div class="bg-gray-50 p-3 rounded-lg mb-3">
                <div class="grid grid-cols-1 gap-2 text-xs">
                  <div><strong>T·ªça ƒë·ªô:</strong> ${lat.toFixed(6)}, ${lng.toFixed(6)}</div>
                  <div><strong>ƒê·ªô ch√≠nh x√°c:</strong> ${Math.round(accuracy)}m</div>
                  <div><strong>Th·ªùi gian:</strong> ${new Date().toLocaleString('vi-VN')}</div>
                </div>
              </div>
              <div class="flex gap-2">
                <button onclick="shareCurrentLocation()" class="flex-1 bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600">
                  Chia s·∫ª
                </button>
                <button onclick="recalibrateLocation()" class="flex-1 bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600">
                  Hi·ªáu ch·ªânh
                </button>
              </div>
            </div>
          `).openPopup();
        });
        
        map.setView([lat, lng], 15);
        
        locateBtn.innerHTML = '<i class="ri-map-pin-line text-lg"></i>';
        locateBtn.disabled = false;
        returnBtn.style.display = 'block';
        
        sosEmergencySystem.currentLocation = { lat, lng, accuracy };
        sosEmergencySystem.lastLocationUpdate = new Date();
      },
      function(error) {
        let errorMessage = 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa b·∫°n';
        switch(error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p v·ªã tr√≠';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng';
            break;
          case error.TIMEOUT:
            errorMessage = 'Y√™u c·∫ßu ƒë·ªãnh v·ªã ƒë√£ h·∫øt th·ªùi gian';
            break;
        }
        
        showNotification(errorMessage, 'error');
        locateBtn.innerHTML = '<i class="ri-map-pin-line text-lg"></i>';
        locateBtn.disabled = false;
      },
      options
    );
  }

  function returnToCurrentLocation() {
    if (currentPosition && currentLocationMarker) {
      map.setView([currentPosition.lat, currentPosition.lng], 15);
      currentLocationMarker.openPopup();
    }
  }

  async function getLocationInfo(lat, lng) {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=vi`);
      const data = await response.json();
      
      if (data && data.display_name) {
        return data.display_name;
      }
      
      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
    } catch (error) {
      console.log('L·ªói l·∫•y th√¥ng tin ƒë·ªãa ph∆∞∆°ng:', error);
      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
    }
  }

  // Global functions for popup buttons
  window.shareCurrentLocation = function() {
    if (currentPosition) {
      const shareText = `üìç V·ªã tr√≠ c·ªßa t√¥i:\nVƒ© ƒë·ªô: ${currentPosition.lat.toFixed(6)}\nKinh ƒë·ªô: ${currentPosition.lng.toFixed(6)}\nGoogle Maps: https://maps.google.com/?q=${currentPosition.lat},${currentPosition.lng}`;
      
      if (navigator.share) {
        navigator.share({
          title: 'V·ªã tr√≠ hi·ªán t·∫°i',
          text: shareText
        });
      } else {
        navigator.clipboard.writeText(shareText).then(() => {
          showNotification('ƒê√£ sao ch√©p v·ªã tr√≠ v√†o clipboard!', 'success');
        });
      }
    }
  };

  window.recalibrateLocation = function() {
    locateCurrentPosition();
  };

  return map;
}

// Enhanced user location function
function locateUser() {
  const locateBtn = document.getElementById('locateBtn');
  if (locateBtn) {
    locateBtn.click();
  } else {
    setTimeout(() => {
      const btn = document.getElementById('locateBtn');
      if (btn) btn.click();
    }, 1000);
  }
}

// Enhanced feature handling
function handleFeatureClick(feature) {
  if (feature === 'sos') {
    openSOSModal();
  } else {
    const message = featureMessages[feature];
    if (message) {
      showDetailedAlert(feature, message);
    }
  }
}

// Enhanced detailed alert function
function showDetailedAlert(feature, message) {
  const titles = {
    weather: 'üå§Ô∏è Th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt',
    plants: 'üå± T∆∞ v·∫•n n√¥ng nghi·ªáp th√¥ng minh',
    alerts: '‚ö†Ô∏è C·∫£nh b√°o th·ªùi ti·∫øt v√† thi√™n tai'
  };
  
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';
  modal.innerHTML = `
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-bold text-gray-800">${titles[feature]}</h3>
        <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
          <i class="ri-close-line text-xl"></i>
        </button>
      </div>
      <div class="text-sm text-gray-600 whitespace-pre-line leading-relaxed">
        ${message}
      </div>
      <div class="mt-6 flex gap-3">
        <button onclick="this.closest('.fixed').remove()" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors">
          ƒê√≥ng
        </button>
        <button onclick="handleFeatureAction('${feature}')" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors">
          Xem th√™m
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
}

// Handle feature actions
function handleFeatureAction(feature) {
  switch(feature) {
    case 'weather':
      // Scroll to charts section
      document.querySelector('#temperatureChart').scrollIntoView({ behavior: 'smooth' });
      break;
    case 'plants':
      showNotification('T√≠nh nƒÉng t∆∞ v·∫•n n√¥ng nghi·ªáp chi ti·∫øt ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!', 'info');
      break;
    case 'alerts':
      openDisasterWarningModal();
      break;
  }
  
  // Close the modal
  document.querySelector('.fixed.inset-0').remove();
}

// Enhanced search functionality
function handleLocationSearch() {
  const searchInput = document.getElementById('locationSearch');
  const query = searchInput.value.trim();
  
  if (query) {
    showNotification(`üîç ƒêang t√¨m ki·∫øm th·ªùi ti·∫øt cho: "${query}"`, 'info');
    
    // Simulate search with timeout
    setTimeout(() => {
      const mockResults = [
        { name: 'H√† N·ªôi', temp: '26¬∞C', condition: 'Nhi·ªÅu m√¢y' },
        { name: 'TP.HCM', temp: '30¬∞C', condition: 'N·∫Øng ƒë·∫πp' },
        { name: 'ƒê√† N·∫µng', temp: '28¬∞C', condition: 'N·∫Øng √≠t m√¢y' }
      ];
      
      const result = mockResults.find(r => r.name.toLowerCase().includes(query.toLowerCase())) || 
                    { name: query, temp: '27¬∞C', condition: 'D·ªØ li·ªáu m√¥ ph·ªèng' };
      
      showNotification(`üìç ${result.name}: ${result.temp}, ${result.condition}`, 'success');
    }, 1500);
    
    searchInput.value = '';
  }
}

// Enhanced smooth scrolling
function initializeSmoothScrolling() {
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
}

// Enhanced fade-in animation
function addFadeInAnimation() {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('fade-in');
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });

  document.querySelectorAll('.weather-card, .bg-white').forEach(card => {
    observer.observe(card);
  });
}

// Enhanced initialization
document.addEventListener("DOMContentLoaded", () => {
  // Start clock
  setInterval(updateClock, 1000);
  updateClock();

  // Initialize charts
  initializeCharts();

  // Initialize map
  window.weatherMap = initializeMap();

  // Add event listeners for feature buttons
  document.querySelectorAll('.feature-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      const feature = btn.getAttribute('data-feature');
      handleFeatureClick(feature);
    });
  });

  // Enhanced search functionality
  const searchInput = document.getElementById('locationSearch');
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleLocationSearch();
    }
  });

  // Add search suggestions
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.toLowerCase();
    if (query.length > 1) {
      // Show search suggestions (simplified)
      const suggestions = ['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'C·∫ßn Th∆°', 'H·∫£i Ph√≤ng', 'Nha Trang']
        .filter(city => city.toLowerCase().includes(query));
      
      // You can implement a dropdown here
    }
  });

  // Initialize smooth scrolling
  initializeSmoothScrolling();

  // Add fade-in animations
  addFadeInAnimation();

  // Make functions globally available
  window.locateUser = locateUser;
  
  // Auto-update weather data every 5 minutes
  setInterval(() => {
    updateWeatherData();
  }, 300000);
  
  // Show welcome notification
  setTimeout(() => {
    showNotification('üåü Ch√†o m·ª´ng ƒë·∫øn v·ªõi Weather & Life Pro!', 'success');
  }, 2000);
});

// Enhanced weather data update function
function updateWeatherData() {
  // Simulate real-time data updates
  const variation = () => Math.random() * 4 - 2; // ¬±2 variation
  
  weatherData.temperature = weatherData.temperature.map(temp => 
    Math.max(15, Math.min(40, temp + variation()))
  );
  
  weatherData.humidity = weatherData.humidity.map(humidity => 
    Math.max(30, Math.min(100, humidity + variation()))
  );
  
  // Re-initialize charts with new data
  initializeCharts();
  
  showNotification('üìä D·ªØ li·ªáu th·ªùi ti·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 'info');
}

// Enhanced window resize handling
window.addEventListener('resize', () => {
  // Charts will auto-resize due to the resize listeners in initializeCharts
  if (window.weatherMap) {
    window.weatherMap.invalidateSize();
  }
});

// Enhanced interactive features
document.addEventListener('DOMContentLoaded', () => {
  // Enhanced navigation hover effects
  const navLinks = document.querySelectorAll('nav a');
  navLinks.forEach(link => {
    link.addEventListener('mouseenter', () => {
      link.style.transform = 'translateY(-2px)';
      link.style.textShadow = '0 2px 4px rgba(0,0,0,0.1)';
    });
    
    link.addEventListener('mouseleave', () => {
      link.style.transform = 'translateY(0)';
      link.style.textShadow = 'none';
    });
  });

  // Enhanced weather card interactions
  document.querySelectorAll('.weather-card').forEach(card => {
    card.addEventListener('click', () => {
      card.style.transform = 'scale(0.98)';
      setTimeout(() => {
        card.style.transform = '';
      }, 150);
    });
    
    // Add ripple effect
    card.addEventListener('mousedown', (e) => {
      const ripple = document.createElement('div');
      const rect = card.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = e.clientX - rect.left - size / 2;
      const y = e.clientY - rect.top - size / 2;
      
      ripple.style.cssText = `
        position: absolute;
        width: ${size}px;
        height: ${size}px;
        left: ${x}px;
        top: ${y}px;
        background: rgba(255,255,255,0.3);
        border-radius: 50%;
        transform: scale(0);
        animation: ripple 0.6s ease-out;
        pointer-events: none;
        z-index: 1;
      `;
      
      card.style.position = 'relative';
      card.style.overflow = 'hidden';
      card.appendChild(ripple);
      
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });
});

// SOS Emergency Functions (keeping existing functionality with enhancements)
function openSOSModal() {
  const modal = document.getElementById('sosModal');
  if (!modal) {
    createSOSModal();
    return;
  }
  
  modal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';
  
  updateCurrentLocation();
}

function closeSOSModal() {
  const modal = document.getElementById('sosModal');
  if (modal) {
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
  }
  
  if (sosEmergencySystem.countdownInterval) {
    clearInterval(sosEmergencySystem.countdownInterval);
    sosEmergencySystem.countdownInterval = null;
  }
  sosEmergencySystem.isEmergencyActive = false;
}

function createSOSModal() {
  const modalHTML = `
    <div id="sosModal" class="fixed inset-0 bg-black bg-opacity-60 z-50 hidden">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-3xl shadow-2xl max-w-5xl w-full max-h-[90vh] overflow-y-auto">
          <!-- Header -->
          <div class="bg-gradient-to-r from-red-500 to-red-600 text-white p-8 rounded-t-3xl">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <i class="ri-alarm-warning-line text-3xl"></i>
                </div>
                <div>
                  <h2 class="text-3xl font-bold">H·ªá th·ªëng SOS kh·∫©n c·∫•p</h2>
                  <p class="text-red-100 text-lg">Nh·∫•n v√† gi·ªØ ƒë·ªÉ k√≠ch ho·∫°t t√≠n hi·ªáu c·ª©u h·ªô</p>
                </div>
              </div>
              <button onclick="closeSOSModal()" class="text-white hover:bg-white hover:bg-opacity-20 p-3 rounded-full transition-colors">
                <i class="ri-close-line text-2xl"></i>
              </button>
            </div>
          </div>

          <!-- Content -->
          <div class="p-8">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <!-- SOS Button Section -->
              <div class="text-center">
                <div class="mb-8">
                  <button id="sosButton" class="w-56 h-56 bg-gradient-to-br from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white rounded-full shadow-2xl transition-all duration-300 transform hover:scale-105 active:scale-95 mx-auto flex items-center justify-center flex-col border-4 border-red-300" 
                          onmousedown="startSOSActivation()" onmouseup="cancelSOSActivation()" onmouseleave="cancelSOSActivation()"
                          ontouchstart="startSOSActivation()" ontouchend="cancelSOSActivation()">
                    <i class="ri-shield-line text-7xl mb-3"></i>
                    <span class="text-3xl font-bold">SOS</span>
                    <span class="text-sm mt-2 opacity-90">Nh·∫•n & gi·ªØ</span>
                  </button>
                  <p class="text-gray-600 mt-6 text-lg">Nh·∫•n v√† gi·ªØ trong 5 gi√¢y ƒë·ªÉ k√≠ch ho·∫°t t√≠n hi·ªáu SOS</p>
                  <div id="sosCountdown" class="mt-4 text-red-600 font-bold text-2xl hidden"></div>
                </div>
                
                <!-- Current Location -->
                <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6 border border-blue-200">
                  <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                    <i class="ri-map-pin-line text-blue-600 text-2xl"></i>
                    V·ªã tr√≠ hi·ªán t·∫°i
                  </h3>
                  <div id="currentLocationInfo" class="text-sm text-gray-600 mb-4">
                    <p class="flex items-center justify-center gap-2">
                      <i class="ri-loader-4-line animate-spin"></i>
                      ƒêang x√°c ƒë·ªãnh v·ªã tr√≠...
                    </p>
                  </div>
                  <div class="flex gap-3">
                    <button onclick="shareLocation()" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-xl transition-colors flex items-center justify-center gap-2 font-semibold">
                      <i class="ri-share-line"></i>
                      Chia s·∫ª v·ªã tr√≠
                    </button>
                    <button onclick="openInMaps()" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-xl transition-colors flex items-center justify-center gap-2 font-semibold">
                      <i class="ri-map-line"></i>
                      M·ªü b·∫£n ƒë·ªì
                    </button>
                  </div>
                </div>
              </div>

              <!-- Emergency Contacts -->
              <div>
                <h3 class="text-xl font-bold text-gray-800 mb-6 flex items-center gap-3">
                  <i class="ri-phone-line text-green-600 text-2xl"></i>
                  Danh b·∫° kh·∫©n c·∫•p
                </h3>
                <div class="space-y-4 max-h-96 overflow-y-auto">
                  ${sosEmergencySystem.emergencyContacts.map(contact => `
                    <div class="contact-card bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 flex items-center justify-between hover:from-gray-100 hover:to-gray-200 transition-all duration-300 border border-gray-200">
                      <div class="flex items-center gap-4">
                        <div class="w-14 h-14 bg-${getContactColor(contact.type)}-500 rounded-full flex items-center justify-center text-white shadow-lg">
                          <i class="${contact.icon} text-xl"></i>
                        </div>
                        <div>
                          <h4 class="font-bold text-gray-800 text-lg">${contact.name}</h4>
                          <p class="text-gray-500 text-sm">${contact.description}</p>
                          <p class="text-gray-700 font-mono text-sm">${contact.number}</p>
                        </div>
                      </div>
                      <button onclick="callEmergency('${contact.number}', '${contact.name}')" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-xl transition-colors flex items-center gap-2 shadow-lg font-semibold">
                        <i class="ri-phone-line text-lg"></i>
                        G·ªçi ngay
                      </button>
                    </div>
                  `).join('')}
                </div>
                
                <div class="mt-6 p-4 bg-yellow-50 rounded-xl border-l-4 border-yellow-400">
                  <div class="flex items-start gap-3">
                    <i class="ri-information-line text-yellow-600 text-xl mt-1"></i>
                    <div>
                      <p class="text-sm text-yellow-800 font-semibold mb-1">L∆∞u √Ω quan tr·ªçng:</p>
                      <p class="text-sm text-yellow-700">
                        Trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p, h√£y g·ªçi ngay s·ªë ƒëi·ªán tho·∫°i c·ª©u h·ªô qu·ªëc gia: 
                        <strong>113 (C·∫£nh s√°t)</strong>, <strong>114 (C·ª©u h·ªèa)</strong>, <strong>115 (C·∫•p c·ª©u)</strong>.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', modalHTML);
  setTimeout(() => openSOSModal(), 100);
}

function getContactColor(type) {
  const colors = {
    police: 'blue',
    fire: 'red',
    medical: 'green',
    rescue: 'orange',
    traffic: 'purple',
    hospital: 'teal',
    family: 'pink',
    insurance: 'indigo'
  };
  return colors[type] || 'gray';
}

function startSOSActivation() {
  if (sosEmergencySystem.isEmergencyActive) return;
  
  sosEmergencySystem.isEmergencyActive = true;
  let countdown = 5;
  
  const countdownElement = document.getElementById('sosCountdown');
  const sosButton = document.getElementById('sosButton');
  
  if (countdownElement && sosButton) {
    countdownElement.classList.remove('hidden');
    sosButton.classList.add('animate-pulse');
    
    sosEmergencySystem.countdownInterval = setInterval(() => {
      countdownElement.textContent = `K√≠ch ho·∫°t SOS trong ${countdown}s`;
      countdown--;
      
      if (countdown < 0) {
        activateEmergency();
      }
    }, 1000);
  }
}

function cancelSOSActivation() {
  if (sosEmergencySystem.countdownInterval) {
    clearInterval(sosEmergencySystem.countdownInterval);
    sosEmergencySystem.countdownInterval = null;
  }
  
  const countdownElement = document.getElementById('sosCountdown');
  const sosButton = document.getElementById('sosButton');
  
  if (countdownElement) {
    countdownElement.classList.add('hidden');
  }
  
  if (sosButton) {
    sosButton.classList.remove('animate-pulse');
  }
  
  sosEmergencySystem.isEmergencyActive = false;
}

function activateEmergency() {
  cancelSOSActivation();
  
  showNotification('üö® T√åNH TR·∫†NG KH·∫®N C·∫§P ƒê√É ƒê∆Ø·ª¢C K√çCH HO·∫†T!', 'error');
  sendSOSSignal();
  closeSOSModal();
  showEmergencyStatus();
}

function sendSOSSignal() {
  const location = sosEmergencySystem.currentLocation;
  const timestamp = new Date().toLocaleString('vi-VN');
  
  const emergencyData = {
    timestamp,
    location,
    contacts: sosEmergencySystem.emergencyContacts,
    userAgent: navigator.userAgent,
    emergencyId: Date.now()
  };
  
  // Log to emergency history
  sosEmergencySystem.emergencyHistory.push(emergencyData);
  
  console.log('üö® SOS Signal Sent:', emergencyData);
  
  // Enhanced notification
  const locationText = location ? 
    `üìç V·ªã tr√≠: ${location.lat.toFixed(6)}, ${location.lng.toFixed(6)}` : 
    'üìç V·ªã tr√≠: Kh√¥ng x√°c ƒë·ªãnh';
    
  showNotification(`üö® T√çN HI·ªÜU SOS ƒê√É ƒê∆Ø·ª¢C G·ª¨I!\n\n${locationText}\n‚è∞ Th·ªùi gian: ${timestamp}\nüìû ƒêang th√¥ng b√°o ƒë·∫øn c√°c d·ªãch v·ª• c·ª©u h·ªô...`, 'error');
}

function showEmergencyStatus() {
  const statusHTML = `
    <div id="emergencyStatus" class="fixed top-24 left-4 right-4 bg-gradient-to-r from-red-500 to-red-600 text-white p-6 rounded-2xl shadow-2xl z-40 border-2 border-red-300">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-4">
          <div class="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center animate-pulse">
            <i class="ri-alarm-warning-line text-2xl"></i>
          </div>
          <div>
            <h3 class="font-bold text-xl">T√åNH TR·∫†NG KH·∫®N C·∫§P</h3>
            <p class="text-red-100">T√≠n hi·ªáu SOS ƒë√£ ƒë∆∞·ª£c g·ª≠i - ƒêang ch·ªù c·ª©u h·ªô</p>
            <p class="text-red-200 text-sm mt-1">ID: ${Date.now()}</p>
          </div>
        </div>
        <button onclick="cancelEmergency()" class="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg transition-colors font-semibold">
          H·ªßy b·ªè
        </button>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('afterbegin', statusHTML);
}

function cancelEmergency() {
  const statusElement = document.getElementById('emergencyStatus');
  if (statusElement) {
    statusElement.remove();
  }
  showNotification('ƒê√£ h·ªßy t√¨nh tr·∫°ng kh·∫©n c·∫•p', 'info');
}

function updateCurrentLocation() {
  const locationInfo = document.getElementById('currentLocationInfo');
  if (!locationInfo) return;
  
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        const accuracy = position.coords.accuracy;
        
        sosEmergencySystem.currentLocation = { lat, lng, accuracy };
        sosEmergencySystem.lastLocationUpdate = new Date();
        
        locationInfo.innerHTML = `
          <div class="space-y-3">
            <div class="bg-white p-3 rounded-lg border">
              <p class="font-semibold text-gray-800 mb-2">T·ªça ƒë·ªô GPS:</p>
              <div class="font-mono text-sm bg-gray-50 p-2 rounded">
                <div>Vƒ© ƒë·ªô: ${lat.toFixed(6)}</div>
                <div>Kinh ƒë·ªô: ${lng.toFixed(6)}</div>
              </div>
            </div>
            <div class="grid grid-cols-2 gap-2 text-xs">
              <div class="bg-blue-50 p-2 rounded text-center">
                <div class="font-semibold text-blue-700">ƒê·ªô ch√≠nh x√°c</div>
                <div class="text-blue-600">${Math.round(accuracy)}m</div>
              </div>
              <div class="bg-green-50 p-2 rounded text-center">
                <div class="font-semibold text-green-700">C·∫≠p nh·∫≠t</div>
                <div class="text-green-600">${new Date().toLocaleTimeString('vi-VN')}</div>
              </div>
            </div>
          </div>
        `;
        
        getLocationAddress(lat, lng);
      },
      function(error) {
        locationInfo.innerHTML = `
          <div class="text-center p-4">
            <div class="text-red-600 mb-2">
              <i class="ri-error-warning-line text-3xl"></i>
            </div>
            <p class="text-red-600 font-semibold">Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠</p>
            <p class="text-red-500 text-sm mt-1">Vui l√≤ng cho ph√©p truy c·∫≠p v·ªã tr√≠</p>
            <button onclick="updateCurrentLocation()" class="mt-3 bg-blue-500 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-600">
              Th·ª≠ l·∫°i
            </button>
          </div>
        `;
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      }
    );
  } else {
    locationInfo.innerHTML = `
      <div class="text-center p-4 text-red-600">
        <i class="ri-error-warning-line text-3xl mb-2"></i>
        <p class="font-semibold">Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ GPS</p>
      </div>
    `;
  }
}

async function getLocationAddress(lat, lng) {
  try {
    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=vi`);
    const data = await response.json();
    
    if (data && data.display_name) {
      const locationInfo = document.getElementById('currentLocationInfo');
      if (locationInfo) {
        const currentContent = locationInfo.innerHTML;
        locationInfo.innerHTML = `
          <div class="space-y-3">
            <div class="bg-white p-3 rounded-lg border">
              <p class="font-semibold text-gray-800 mb-2">ƒê·ªãa ch·ªâ:</p>
              <p class="text-sm text-gray-600">${data.display_name}</p>
            </div>
            ${currentContent}
          </div>
        `;
      }
    }
  } catch (error) {
    console.log('L·ªói l·∫•y ƒë·ªãa ch·ªâ:', error);
  }
}

function callEmergency(number, name) {
  if (confirm(`üö® B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ªçi ${name} (${number})?`)) {
    window.location.href = `tel:${number}`;
    showNotification(`üìû ƒêang g·ªçi ${name}...`, 'info');
    logEmergencyCall(number, name);
  }
}

function logEmergencyCall(number, name) {
  const callLog = {
    timestamp: new Date().toISOString(),
    name: name,
    number: number,
    location: sosEmergencySystem.currentLocation,
    callId: Date.now()
  };
  
  const existingLogs = JSON.parse(localStorage.getItem('emergencyCallLogs') || '[]');
  existingLogs.push(callLog);
  localStorage.setItem('emergencyCallLogs', JSON.stringify(existingLogs));
  
  console.log('Emergency call logged:', callLog);
}

function shareLocation() {
  const location = sosEmergencySystem.currentLocation;
  if (!location) {
    showNotification('Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c v·ªã tr√≠', 'warning');
    return;
  }
  
  const shareText = `üö® KH·∫®N C·∫§P - V·ªã tr√≠ c·ªßa t√¥i:
Vƒ© ƒë·ªô: ${location.lat.toFixed(6)}
Kinh ƒë·ªô: ${location.lng.toFixed(6)}
Google Maps: https://maps.google.com/?q=${location.lat},${location.lng}
Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
ƒê·ªô ch√≠nh x√°c: ${Math.round(location.accuracy)}m`;
  
  if (navigator.share) {
    navigator.share({
      title: 'V·ªã tr√≠ kh·∫©n c·∫•p - Weather & Life',
      text: shareText
    }).then(() => {
      showNotification('ƒê√£ chia s·∫ª v·ªã tr√≠ th√†nh c√¥ng!', 'success');
    }).catch(() => {
      fallbackShareLocation(shareText);
    });
  } else {
    fallbackShareLocation(shareText);
  }
}

function fallbackShareLocation(text) {
  navigator.clipboard.writeText(text).then(() => {
    showNotification('ƒê√£ sao ch√©p th√¥ng tin v·ªã tr√≠ v√†o clipboard!', 'success');
  }).catch(() => {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    showNotification('ƒê√£ sao ch√©p th√¥ng tin v·ªã tr√≠!', 'success');
  });
}

function openInMaps() {
  const location = sosEmergencySystem.currentLocation;
  if (!location) {
    showNotification('Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c v·ªã tr√≠', 'warning');
    return;
  }
  
  const mapsUrl = `https://maps.google.com/?q=${location.lat},${location.lng}`;
  window.open(mapsUrl, '_blank');
  showNotification('ƒê√£ m·ªü v·ªã tr√≠ trong Google Maps', 'success');
}

// Disaster Warning Functions (keeping existing functionality with enhancements)
function openDisasterWarningModal() {
  const modal = document.getElementById('disasterModal');
  const updateTime = document.getElementById('updateTime');
  
  updateTime.textContent = new Date().toLocaleString('vi-VN');
  
  modal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';
  
  loadDisasterData();
}

function closeDisasterWarningModal() {
  const modal = document.getElementById('disasterModal');
  modal.classList.add('hidden');
  document.body.style.overflow = 'auto';
}

function loadDisasterData() {
  updateCurrentAlerts();
  updateRiskAssessment();
  updateDisasterHistory();
}

function updateCurrentAlerts() {
  const alertsContainer = document.getElementById('currentAlerts');
  
  if (disasterWarningSystem.currentAlerts.length === 0) {
    alertsContainer.innerHTML = `
      <div class="bg-green-100 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
        <i class="ri-shield-check-line text-green-500 text-4xl"></i>
      </div>
      <h4 class="text-xl font-bold text-gray-800 mb-2">Khu v·ª±c an to√†n</h4>
      <p class="text-gray-600 text-lg mb-4">Kh√¥ng c√≥ c·∫£nh b√°o thi√™n tai n√†o trong khu v·ª±c c·ªßa b·∫°n</p>
      <div class="flex items-center justify-center gap-2 text-sm text-gray-500">
        <i class="ri-check-line text-green-500"></i>
        <span>H·ªá th·ªëng ƒëang gi√°m s√°t 24/7</span>
      </div>
    `;
  } else {
    let alertsHTML = '';
    disasterWarningSystem.currentAlerts.forEach(alert => {
      const levelColors = {
        low: 'yellow',
        medium: 'orange', 
        high: 'red',
        critical: 'red'
      };
      const color = levelColors[alert.level] || 'gray';
      
      alertsHTML += `
        <div class="bg-${color}-50 border-l-4 border-${color}-500 p-4 mb-3 rounded-lg">
          <div class="flex items-center">
            <i class="ri-alarm-warning-line text-${color}-500 text-xl mr-3"></i>
            <div class="flex-1">
              <h4 class="font-bold text-${color}-800">${alert.title}</h4>
              <p class="text-${color}-600 text-sm">${alert.description}</p>
              <div class="flex items-center gap-4 mt-2 text-xs text-${color}-500">
                <span>üìç ${alert.area}</span>
                <span>‚è∞ ${alert.time}</span>
                <span class="px-2 py-1 bg-${color}-200 rounded-full font-semibold">${alert.level.toUpperCase()}</span>
              </div>
            </div>
          </div>
        </div>
      `;
    });
    alertsContainer.innerHTML = alertsHTML;
  }
}

function updateRiskAssessment() {
  // Update overall score with animation
  const overallScore = document.querySelector('.w-32.h-32 span');
  if (overallScore) {
    let currentScore = 0;
    const targetScore = disasterWarningSystem.riskAssessment.overall;
    const increment = targetScore / 50;
    
    const updateScore = () => {
      currentScore += increment;
      if (currentScore >= targetScore) {
        overallScore.textContent = targetScore;
      } else {
        overallScore.textContent = Math.floor(currentScore);
        requestAnimationFrame(updateScore);
      }
    };
    
    updateScore();
  }
}

function updateDisasterHistory() {
  // Enhanced history display (if needed)
  console.log('Disaster history updated:', disasterWarningSystem.disasterHistory);
}

function refreshAlerts() {
  const button = event.target.closest('button');
  const originalHTML = button.innerHTML;
  
  button.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>ƒêang t·∫£i...';
  button.disabled = true;
  
  // Simulate API call
  setTimeout(() => {
    // Update timestamp
    document.getElementById('updateTime').textContent = new Date().toLocaleString('vi-VN');
    
    // Simulate new risk assessment
    disasterWarningSystem.riskAssessment.overall = Math.floor(Math.random() * 100);
    disasterWarningSystem.riskAssessment.risks.forEach(risk => {
      risk.level = Math.floor(Math.random() * 100);
    });
    
    loadDisasterData();
    
    button.innerHTML = originalHTML;
    button.disabled = false;
    
    showNotification('üìä ƒê√£ c·∫≠p nh·∫≠t c·∫£nh b√°o m·ªõi nh·∫•t!', 'success');
  }, 2000);
}

function subscribeAlerts() {
  if ('Notification' in window) {
    if (Notification.permission === 'granted') {
      showNotification('‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o c·∫£nh b√°o thi√™n tai!', 'success');
      
      // Send test notification
      setTimeout(() => {
        new Notification('üå¶Ô∏è Weather & Life Pro', {
          body: 'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c·∫£nh b√°o thi√™n tai k·ªãp th·ªùi!',
          icon: 'https://images.pexels.com/photos/1118873/pexels-photo-1118873.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&dpr=1'
        });
      }, 1000);
      
    } else if (Notification.permission !== 'denied') {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          showNotification('üîî ƒê√£ b·∫≠t th√¥ng b√°o c·∫£nh b√°o thi√™n tai!', 'success');
        } else {
          showNotification('‚ö†Ô∏è Vui l√≤ng cho ph√©p th√¥ng b√°o ƒë·ªÉ nh·∫≠n c·∫£nh b√°o k·ªãp th·ªùi!', 'warning');
        }
      });
    } else {
      showNotification('‚ùå Vui l√≤ng b·∫≠t th√¥ng b√°o trong c√†i ƒë·∫∑t tr√¨nh duy·ªát!', 'warning');
    }
  } else {
    showNotification('‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ th√¥ng b√°o!', 'error');
  }
}

function shareAlerts() {
  const shareData = {
    title: 'C·∫£nh b√°o thi√™n tai - Weather & Life Pro',
    text: 'Theo d√µi t√¨nh h√¨nh thi√™n tai v√† nh·∫≠n c·∫£nh b√°o k·ªãp th·ªùi t·∫°i khu v·ª±c c·ªßa b·∫°n v·ªõi h·ªá th·ªëng AI ti√™n ti·∫øn.',
    url: window.location.href
  };
  
  if (navigator.share) {
    navigator.share(shareData).then(() => {
      showNotification('üì§ ƒê√£ chia s·∫ª th√†nh c√¥ng!', 'success');
    }).catch(() => {
      fallbackShare();
    });
  } else {
    fallbackShare();
  }
}

function fallbackShare() {
  const url = window.location.href;
  navigator.clipboard.writeText(url).then(() => {
    showNotification('üìã ƒê√£ sao ch√©p link v√†o clipboard!', 'success');
  }).catch(() => {
    showNotification('‚ö†Ô∏è Kh√¥ng th·ªÉ chia s·∫ª. Vui l√≤ng sao ch√©p link th·ªß c√¥ng!', 'warning');
  });
}

// Enhanced notification system
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 z-50 p-4 rounded-xl shadow-2xl max-w-sm transform transition-all duration-500 translate-x-full border-l-4`;
  
  const colors = {
    success: 'bg-green-500 text-white border-green-600',
    warning: 'bg-yellow-500 text-white border-yellow-600',
    error: 'bg-red-500 text-white border-red-600',
    info: 'bg-blue-500 text-white border-blue-600'
  };
  
  const icons = {
    success: 'ri-check-line',
    warning: 'ri-alert-line',
    error: 'ri-close-circle-line',
    info: 'ri-information-line'
  };
  
  notification.className += ` ${colors[type] || colors.info}`;
  
  notification.innerHTML = `
    <div class="flex items-start gap-3">
      <i class="${icons[type] || icons.info} text-xl mt-0.5"></i>
      <div class="flex-1">
        <p class="whitespace-pre-line leading-relaxed">${message}</p>
      </div>
      <button onclick="this.parentElement.parentElement.remove()" class="text-white hover:bg-white hover:bg-opacity-20 p-1 rounded-full transition-colors ml-2">
        <i class="ri-close-line text-lg"></i>
      </button>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // Show with animation
  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 100);
  
  // Auto-hide after 5 seconds
  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 500);
  }, 5000);
}

// Enhanced event listeners
document.addEventListener('click', function(e) {
  // Close modals when clicking outside
  const sosModal = document.getElementById('sosModal');
  const disasterModal = document.getElementById('disasterModal');
  
  if (sosModal && e.target === sosModal) {
    closeSOSModal();
  }
  
  if (disasterModal && e.target === disasterModal) {
    closeDisasterWarningModal();
  }
});

document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    const sosModal = document.getElementById('sosModal');
    const disasterModal = document.getElementById('disasterModal');
    
    if (sosModal && !sosModal.classList.contains('hidden')) {
      closeSOSModal();
    }
    
    if (disasterModal && !disasterModal.classList.contains('hidden')) {
      closeDisasterWarningModal();
    }
  }
});

// üå§Ô∏è WEATHER DETAIL FUNCTIONS - C√°c h√†m cho form th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt

// L√†m m·ªõi d·ªØ li·ªáu th·ªùi ti·∫øt
function refreshWeatherData() {
  const button = event.target.closest('button');
  const originalHTML = button.innerHTML;
  
  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  button.innerHTML = '<i class="ri-loader-4-line animate-spin"></i> ƒêang c·∫≠p nh·∫≠t...';
  button.disabled = true;
  
  // Gi·∫£ l·∫≠p vi·ªác t·∫£i d·ªØ li·ªáu m·ªõi
  setTimeout(() => {
    // C·∫≠p nh·∫≠t m·ªôt s·ªë gi√° tr·ªã ng·∫´u nhi√™n ƒë·ªÉ m√¥ ph·ªèng d·ªØ li·ªáu m·ªõi
    updateWeatherDisplay();
    
    // Kh√¥i ph·ª•c n√∫t
    button.innerHTML = originalHTML;
    button.disabled = false;
    
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªùi ti·∫øt m·ªõi nh·∫•t!', 'success');
  }, 2000);
}

// C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi ti·∫øt
function updateWeatherDisplay() {
  // T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n ƒë·ªÉ m√¥ ph·ªèng c·∫≠p nh·∫≠t
  const newTemp = Math.floor(Math.random() * 5) + 26; // 26-30¬∞C
  const newHumidity = Math.floor(Math.random() * 20) + 70; // 70-90%
  const newWind = Math.floor(Math.random() * 10) + 10; // 10-20 km/h
  const newUV = Math.floor(Math.random() * 3) + 7; // 7-9
  
  // C·∫≠p nh·∫≠t c√°c gi√° tr·ªã tr√™n giao di·ªán
  const tempElements = document.querySelectorAll('.weather-metric-card .text-2xl');
  if (tempElements[0]) tempElements[0].textContent = `${newTemp}¬∞C`;
  if (tempElements[1]) tempElements[1].textContent = `${newHumidity}%`;
  if (tempElements[2]) tempElements[2].textContent = `${newWind} km/h`;
  if (tempElements[3]) tempElements[3].textContent = `${newUV}`;
  
  // C·∫≠p nh·∫≠t nhi·ªát ƒë·ªô ch√≠nh
  const mainTemp = document.querySelector('.text-4xl.font-bold');
  if (mainTemp) mainTemp.textContent = `${newTemp}¬∞C`;
  
  // Th√™m hi·ªáu ·ª©ng animation cho c√°c card
  document.querySelectorAll('.weather-metric-card').forEach(card => {
    card.style.transform = 'scale(1.05)';
    setTimeout(() => {
      card.style.transform = 'scale(1)';
    }, 200);
  });
}

// Chia s·∫ª th√¥ng tin th·ªùi ti·∫øt
function shareWeatherInfo() {
  const weatherInfo = `üå§Ô∏è TH√îNG TIN TH·ªúI TI·∫æT CHI TI·∫æT

üìç V·ªã tr√≠: ƒê√† N·∫µng, Vi·ªát Nam
üå°Ô∏è Nhi·ªát ƒë·ªô: 28¬∞C (C·∫£m gi√°c nh∆∞ 31¬∞C)
üíß ƒê·ªô ·∫©m: 75%
üí® Gi√≥: 15 km/h, h∆∞·ªõng ƒê√¥ng Nam
‚òÄÔ∏è Ch·ªâ s·ªë UV: 8 (Cao)
üåä √Åp su·∫•t: 1015 hPa
üëÅÔ∏è T·∫ßm nh√¨n: 10 km

üìä D·ª± b√°o:
‚Ä¢ S√°ng: N·∫Øng √≠t m√¢y
‚Ä¢ Chi·ªÅu: C√≥ th·ªÉ c√≥ m∆∞a r√†o
‚Ä¢ T·ªëi: Tr·ªùi quang, m√°t m·∫ª

üì± Theo d√µi th·ªùi ti·∫øt t·∫°i: ${window.location.href}`;

  if (navigator.share) {
    navigator.share({
      title: 'Th√¥ng tin th·ªùi ti·∫øt ƒê√† N·∫µng',
      text: weatherInfo
    }).then(() => {
      showNotification('ƒê√£ chia s·∫ª th√¥ng tin th·ªùi ti·∫øt!', 'success');
    }).catch(() => {
      fallbackShareWeather(weatherInfo);
    });
  } else {
    fallbackShareWeather(weatherInfo);
  }
}

// Chia s·∫ª th√¥ng tin th·ªùi ti·∫øt d·ª± ph√≤ng
function fallbackShareWeather(text) {
  navigator.clipboard.writeText(text).then(() => {
    showNotification('ƒê√£ sao ch√©p th√¥ng tin th·ªùi ti·∫øt v√†o clipboard!', 'success');
  }).catch(() => {
    // Hi·ªÉn th·ªã modal v·ªõi th√¥ng tin ƒë·ªÉ ng∆∞·ªùi d√πng copy th·ªß c√¥ng
    alert(text);
  });
}

// ƒê·∫∑t c·∫£nh b√°o th·ªùi ti·∫øt
function setWeatherAlert() {
  // T·∫°o modal ƒë·∫∑t c·∫£nh b√°o
  const alertModal = document.createElement('div');
  alertModal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';
  alertModal.innerHTML = `
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6">
      <div class="flex items-center gap-3 mb-6">
        <div class="bg-orange-100 p-3 rounded-full">
          <i class="ri-notification-line text-orange-600 text-xl"></i>
        </div>
        <h3 class="text-xl font-bold text-gray-800">ƒê·∫∑t c·∫£nh b√°o th·ªùi ti·∫øt</h3>
      </div>
      
      <div class="space-y-4 mb-6">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Lo·∫°i c·∫£nh b√°o</label>
          <select class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500">
            <option value="temperature">Nhi·ªát ƒë·ªô cao (>35¬∞C)</option>
            <option value="rain">M∆∞a l·ªõn (>50mm)</option>
            <option value="wind">Gi√≥ m·∫°nh (>30km/h)</option>
            <option value="uv">Ch·ªâ s·ªë UV cao (>9)</option>
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Th·ªùi gian c·∫£nh b√°o</label>
          <select class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500">
            <option value="1h">1 gi·ªù tr∆∞·ªõc</option>
            <option value="3h">3 gi·ªù tr∆∞·ªõc</option>
            <option value="6h">6 gi·ªù tr∆∞·ªõc</option>
            <option value="12h">12 gi·ªù tr∆∞·ªõc</option>
          </select>
        </div>
        
        <div class="flex items-center gap-2">
          <input type="checkbox" id="pushNotification" class="w-4 h-4 text-orange-600 border-gray-300 rounded focus:ring-orange-500">
          <label for="pushNotification" class="text-sm text-gray-700">G·ª≠i th√¥ng b√°o push</label>
        </div>
      </div>
      
      <div class="flex gap-3">
        <button onclick="this.closest('.fixed').remove()" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-4 py-3 rounded-lg transition-colors">
          H·ªßy
        </button>
        <button onclick="confirmWeatherAlert(this)" class="flex-1 bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg transition-colors">
          ƒê·∫∑t c·∫£nh b√°o
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(alertModal);
}

// X√°c nh·∫≠n ƒë·∫∑t c·∫£nh b√°o
function confirmWeatherAlert(button) {
  const modal = button.closest('.fixed');
  const alertType = modal.querySelector('select').value;
  const alertTime = modal.querySelectorAll('select')[1].value;
  const pushEnabled = modal.querySelector('#pushNotification').checked;
  
  // L∆∞u c·∫£nh b√°o v√†o localStorage
  const alerts = JSON.parse(localStorage.getItem('weatherAlerts') || '[]');
  alerts.push({
    id: Date.now(),
    type: alertType,
    time: alertTime,
    pushEnabled: pushEnabled,
    created: new Date().toISOString()
  });
  localStorage.setItem('weatherAlerts', JSON.stringify(alerts));
  
  // ƒê√≥ng modal
  modal.remove();
  
  // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
  showNotification('ƒê√£ ƒë·∫∑t c·∫£nh b√°o th·ªùi ti·∫øt th√†nh c√¥ng!', 'success');
  
  // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o n·∫øu c·∫ßn
  if (pushEnabled && 'Notification' in window && Notification.permission !== 'granted') {
    Notification.requestPermission().then(permission => {
      if (permission === 'granted') {
        showNotification('ƒê√£ b·∫≠t th√¥ng b√°o push cho c·∫£nh b√°o th·ªùi ti·∫øt!', 'success');
      }
    });
  }
}

// Ki·ªÉm tra v√† g·ª≠i c·∫£nh b√°o th·ªùi ti·∫øt
function checkWeatherAlerts() {
  const alerts = JSON.parse(localStorage.getItem('weatherAlerts') || '[]');
  
  alerts.forEach(alert => {
    // Logic ki·ªÉm tra ƒëi·ªÅu ki·ªán c·∫£nh b√°o
    // ·ªû ƒë√¢y ch·ªâ l√† demo, trong th·ª±c t·∫ø s·∫Ω so s√°nh v·ªõi d·ªØ li·ªáu th·ªùi ti·∫øt th·ª±c
    const shouldAlert = Math.random() > 0.9; // 10% chance ƒë·ªÉ demo
    
    if (shouldAlert && alert.pushEnabled && 'Notification' in window && Notification.permission === 'granted') {
      new Notification('üå§Ô∏è C·∫£nh b√°o th·ªùi ti·∫øt', {
        body: `ƒêi·ªÅu ki·ªán th·ªùi ti·∫øt ${alert.type} ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán t·∫°i ƒê√† N·∫µng`,
        icon: '/favicon.ico',
        tag: `weather-alert-${alert.id}`
      });
    }
  });
}

// Kh·ªüi t·∫°o ki·ªÉm tra c·∫£nh b√°o ƒë·ªãnh k·ª≥
setInterval(checkWeatherAlerts, 300000); // Ki·ªÉm tra m·ªói 5 ph√∫t

// Performance monitoring
window.addEventListener('load', () => {
  const loadTime = performance.now();
  console.log(`‚ö° Weather & Life Pro loaded in ${Math.round(loadTime)}ms`);
  
  // Show performance notification for development
  if (loadTime > 3000) {
    setTimeout(() => {
      showNotification('‚ö†Ô∏è Trang web t·∫£i ch·∫≠m. ƒêang t·ªëi ∆∞u h√≥a...', 'warning');
    }, 1000);
  }
});

// Service Worker registration for offline support (if available)
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then(registration => {
        console.log('SW registered: ', registration);
      })
      .catch(registrationError => {
        console.log('SW registration failed: ', registrationError);
      });
  });
}
